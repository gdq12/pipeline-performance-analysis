{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.3", "generated_at": "2025-03-26T20:07:48.610378Z", "invocation_id": "40309571-ff1c-45d1-b903-cd14e0a6b12b", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-26T20:05:44.750714Z", "completed_at": "2025-03-26T20:05:44.782283Z"}, {"name": "execute", "started_at": "2025-03-26T20:05:44.783720Z", "completed_at": "2025-03-26T20:07:48.593945Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 123.84635305404663, "adapter_response": {"_message": "CREATE TABLE (1.6b rows, 452.6 GiB processed)", "code": "CREATE TABLE", "rows_affected": 1648566991, "bytes_processed": 485979740275, "bytes_billed": 485980372992, "location": "EU", "project_id": "pipeline-analysis-452722", "job_id": "fd600e63-1f0e-4292-993c-a81e3537d77f", "slot_ms": 161232532}, "message": "CREATE TABLE (1.6b rows, 452.6 GiB processed)", "failures": null, "unique_id": "model.pipeline_analysis_transform.stg_yellow__3_from_source_clean", "compiled": true, "compiled_code": "\n\nselect \n  -- cols that help better scan the data \n  trip_type_start_date,\n  data_source,\n  pickup_date,\n  -- IDs\n  trip_id,\n  vendor_id,\n  -- time centric dimensions \n  pickup_datetime,\n  dropoff_datetime,\n  trip_type_end_date,\n  -- more time dimensions for later analysis \n  \n\n    datetime_diff(\n        cast(dropoff_datetime as datetime),\n        cast(pickup_datetime as datetime),\n        minute\n    )\n\n   trip_duration_min,\n  extract(year from pickup_datetime) pickup_year,\n  extract(dayofweek from pickup_datetime) pickup_weekday_num,\n  case \n        when extract(dayofweek from pickup_datetime) = 1\n            then 'SUNDAY'\n        when extract(dayofweek from pickup_datetime) = 2\n            then 'MONDAY'\n        when extract(dayofweek from pickup_datetime) = 3\n            then 'TUESDAY'\n        when extract(dayofweek from pickup_datetime) = 4\n            then 'WEDNESDAY'\n        when extract(dayofweek from pickup_datetime) = 5\n            then 'THURSDAY'\n        when extract(dayofweek from pickup_datetime) = 6\n            then 'FRIDAY'\n        when extract(dayofweek from pickup_datetime) = 7\n            then 'SATURDAY'\n    end pickup_weekday_name,\n  extract(week from pickup_datetime) pickup_calender_week_num,\n  extract(month from pickup_datetime) pickup_month,\n  extract(hour from pickup_datetime) pickup_hour,\n  bigfunctions.eu.is_public_holiday(cast(pickup_datetime as date), 'US') pickup_public_holiday,\n  extract(year from dropoff_datetime) dropoff_year,\n  extract(dayofweek from dropoff_datetime) dropoff_weekday_num,\n  case \n        when extract(dayofweek from dropoff_datetime) = 1\n            then 'SUNDAY'\n        when extract(dayofweek from dropoff_datetime) = 2\n            then 'MONDAY'\n        when extract(dayofweek from dropoff_datetime) = 3\n            then 'TUESDAY'\n        when extract(dayofweek from dropoff_datetime) = 4\n            then 'WEDNESDAY'\n        when extract(dayofweek from dropoff_datetime) = 5\n            then 'THURSDAY'\n        when extract(dayofweek from dropoff_datetime) = 6\n            then 'FRIDAY'\n        when extract(dayofweek from dropoff_datetime) = 7\n            then 'SATURDAY'\n    end dropoff_weekday_name,\n  extract(week from dropoff_datetime) dropoff_calender_week_num,\n  extract(month from dropoff_datetime) dropoff_month,\n  extract(hour from dropoff_datetime) dropoff_hour,\n  bigfunctions.eu.is_public_holiday(cast(dropoff_datetime as date), 'US') dropoff_public_holiday,\n  -- location centric info \n  pickup_location_id,\n  dropoff_location_id,\n  -- trip categorization\n  ratecode_id,\n  store_and_fwd_flag,\n  payment_type,\n  -- for unit centric calculations\n  passenger_count,\n  trip_distance,\n  -- revenue centric stats\n  fare_amount,\n  extra_amount,\n  mta_tax,\n  tip_amount,\n  tolls_amount,\n  improvement_surcharge,\n  total_amount,\n  congestion_surcharge,\n  airport_fee,\n  -- data source centric info\n  creation_dt,\n  current_timestamp() transformation_dt\nfrom `pipeline-analysis-452722`.`nytaxi_stage2`.`stg_yellow__2_filter_out_faulty`", "relation_name": "`pipeline-analysis-452722`.`nytaxi_stage2`.`stg_yellow__3_from_source_clean`", "batch_results": null}], "elapsed_time": 124.65876364707947, "args": {"partial_parse": true, "empty": false, "quiet": false, "cache_selected_only": false, "log_file_max_bytes": 10485760, "favor_state": false, "macro_debugging": false, "require_explicit_package_overrides_for_builtin_materializations": true, "require_resource_names_without_spaces": false, "require_yaml_configuration_for_mf_time_spines": false, "strict_mode": false, "invocation_command": "dbt run --select stg_yellow__3_from_source_clean", "log_level": "info", "version_check": true, "populate_cache": true, "source_freshness_run_project_hooks": false, "state_modified_compare_vars": false, "static_parser": true, "vars": {}, "indirect_selection": "eager", "printer_width": 80, "show_resource_report": false, "select": ["stg_yellow__3_from_source_clean"], "skip_nodes_if_on_run_start_fails": false, "use_colors": true, "project_dir": "/workspaces/pipeline-performance-analysis/2_transformation_dbt", "exclude": [], "require_batched_execution_for_custom_microbatch_strategy": false, "write_json": true, "warn_error_options": {"include": [], "exclude": []}, "state_modified_compare_more_unrendered_values": false, "use_colors_file": true, "log_path": "/workspaces/pipeline-performance-analysis/2_transformation_dbt/logs", "print": true, "require_nested_cumulative_type_params": false, "defer": false, "log_format_file": "debug", "log_format": "default", "send_anonymous_usage_stats": true, "profiles_dir": "/workspaces/pipeline-performance-analysis/2_transformation_dbt", "log_level_file": "debug", "introspect": true, "which": "run", "partial_parse_file_diff": true}}